generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Message {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  messageId   String        @unique
  roomId      String
  senderId    String        @db.ObjectId
  message     String
  type        MessageType   @default(TEXT)
  fileUrl     String?
  success     Boolean       @default(true)
  seenByRefId String?       @db.ObjectId
  seenBy      MessageSeen?  @relation(fields: [seenByRefId], references: [id])
  editHistory EditHistory[]
  source      MessageSource
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([roomId, createdAt(sort: Desc)])
}

model EditHistory {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  editedAt        DateTime
  previousContent String
  messageId       String   @db.ObjectId
  message         Message  @relation(fields: [messageId], references: [id])
}

model MessageSeen {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  message Message[]
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String                 @unique
  email                   String                 @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  role                    Role                   @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId
  isLoggedIn              Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum MessageSource {
  WEB
  MOBILE
  API
}

enum Role {
  USER
  ADMIN
}
